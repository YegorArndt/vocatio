generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Currency {
  USD
  EUR
  GBP
  CAD
  AUD
  RUB
  UAH
  BYN
}

enum SourceName {
  LINKEDIN
  INDEED
  GLASSDOOR
  HH
}

enum Seniority {
  JUNIOR
  MIDDLE
  SENIOR
  LEAD
}

enum Remote {
  HYBRID
  ON_SITE
  REMOTE
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum ProfessionField {
  FRONTEND
  BACKEND
  FULLSTACK
  SECURITY
  PROJECT_MANAGER
  PRODUCT_MANAGER
  DATA_SCIENTIST
  DEVOPS
  UI_UX_DESIGNER
  SYSTEM_ADMINISTRATOR
  DATABASE_ADMINISTRATOR
  MOBILE_DEVELOPER
  EMBEDDED_DEVELOPER
  QA
  NETWORK_ENGINEER
  CLOUD_ENGINEER
  MACHINE_LEARNING_ENGINEER
  ANALYST
  SCRUM_MASTER
}

enum SkillLevel {
  BEGINNER
  BASIC
  INTERMEDIATE
  ADVANCED
  EXPERT
  NATIVE
}

model LanguageEntry {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  level     SkillLevel
  user      User       @relation(fields: [userId], references: [id])
  userId    String
}

model SkillEntry {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  level     SkillLevel
  user      User       @relation(fields: [userId], references: [id])
  userId    String
}

model EducationEntry {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  place       String
  period      String
  description String
  image       String
  title       String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model EmploymentHistoryEntry {
  id                 String   @id @default(uuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  place              String
  period             String
  description        String
  descriptionSummary String // To minimize costs of OpenAI API
  skills             String[]
  image              String
  title              String
  user               User     @relation(fields: [userId], references: [id])
  userId             String
}

model DraftEmploymentHistoryEntry {
  id                               String   @id @default(uuid())
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt
  place                            String
  period                           String
  description                      String
  skills                           String[]
  image                            String
  title                            String
  originalEmploymentHistoryEntryId String
  draft                            Draft?   @relation(fields: [draftId], references: [id])
  draftId                          String?
}

model RecommendationsEntry {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  place       String
  period      String
  description String
  image       String
  title       String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model AwardsEntry {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  place       String
  period      String
  description String
  image       String
  title       String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model CertificatesEntry {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  place       String
  period      String
  description String
  image       String
  title       String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Contact {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  email       String
  location    String?
  phone       String?
  github      String?
  linkedin    String?
  indeed      String?
  glassdoor   String?
  hh          String?
  facebook    String?
  instagram   String?
  twitter     String?
  telegram    String?
  skype       String?
  vk          String?
  website     String?
  address     String?
  country     String?
  city        String?
  zip         String?
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @unique
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  image    String
  jobTitle String?

  professionField ProfessionField?

  languages LanguageEntry[]
  skills    SkillEntry[]

  education         EducationEntry[]
  employmentHistory EmploymentHistoryEntry[]
  recommendations   RecommendationsEntry[]
  awards            AwardsEntry[]
  certificates      CertificatesEntry[]

  professionalSummary String?  

  contact       Contact?

  vacancies Vacancy[]
  drafts    Draft[]
  cvs       Cv[]
}

model Draft {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  professionalSummary String
  jobTitle            String
  employmentHistory   DraftEmploymentHistoryEntry[]
  topSkills           String[]

  userId String
  user User @relation(fields: [userId], references: [id])

  vacancyId String   
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id])
}

model VacancyGroup {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  icon String?

   

 }

model Vacancy {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  image           String?
  companyName     String?
  location        String?
  country         String?
  age             DateTime?
  numApplicants   String?
  salaryMin       String?
  salaryMax       String?
  isAnnualSalary  Boolean?         @default(false)
  salaryCurrency  Currency?        @default(USD)
  jobTitle        String?
  professionField ProfessionField?

  summary        String? @db.Text
  description    String?  @db.Text
  requiredSkills String?

  group            String?

  requiredRemote    Remote?
  requiredSeniority Seniority?
  employmentType    EmploymentType?
  requiredYearsMin  String?
  requiredYearsMax  String?
  requiredEducation String?
  requiredLanguages String[]

  sourceUrl  String?
  sourceName String?

  user   User[]
  cvs    Cv[]
  drafts Draft[]
}

model Cv {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String
  a4           String
  sections     Json
  intrinsic    Json
  image        String
  pokemonImage String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  vacancyId String
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id])
}

 