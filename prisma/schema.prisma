generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum SourceName {
  LINKEDIN
  INDEED
  GLASSDOOR
  HH
}

enum Seniority {
  JUNIOR
  MIDDLE
  SENIOR
  LEAD
}

enum Remote {
  HYBRID
  ON_SITE
  REMOTE
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum ProfessionField {
  FRONTEND
  BACKEND
  FULLSTACK
  SECURITY
  PROJECT_MANAGER
  PRODUCT_MANAGER
  DATA_SCIENTIST
  DEVOPS
  UX_DESIGNER
  UI_DESIGNER
  SYSTEM_ADMINISTRATOR
  DATABASE_ADMINISTRATOR
  MOBILE_DEVELOPER
  EMBEDDED_DEVELOPER
  QA
  NETWORK_ENGINEER
  CLOUD_ENGINEER
  MACHINE_LEARNING_ENGINEER
  ANALYST
  SCRUM_MASTER
}

enum LanguageLevel {
  A1
  A2
  B1
  B2
  C1
  C2
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Own user data
  ownName            String
  ownImage           String
  ownCountry         String?
  ownEmail           String
  ownPhone           String?
  ownCity            String?
  ownJobTitle        String?
  ownExperienceYears Int?
  ownStories         Story[]
  ownObjective       String?
  ownProfessionField ProfessionField?
  ownLanguages       LanguageLevel[]

  // Social media links
  linkedInUrl  String?
  indeedUrl    String?
  glassdoorUrl String?
  hhUrl        String?
  githubUrl    String?

  // Desired job data
  desiredProfessionField ProfessionField?
  desiredRemote          Remote?
  desiredSalaryMin       Int?
  desiredSalaryMax       Int?
  desiredSeniority       Seniority?
  desiredEmploymentType  EmploymentType?

  // Cv data
  vacancies Vacancy[]
  cvs       Cv[]
}

model Story {
  id                 String   @id @default(uuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  order              Int
  periodOfEmployment String
  companyName        String
  jobTitle           String
  story              String   @db.Text
  user               User     @relation(fields: [userId], references: [id])
  userId             String
}

model Vacancy {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  user              User             @relation(fields: [userId], references: [id])
  userId            String
  companyName       String?
  location          String?
  country           String?
  age               DateTime?
  numApplicants     Int?
  salaryMin         Int?
  salaryMax         Int?
  jobTitle          String?
  description       String?          @db.Text
  professionField   ProfessionField?
  requiredRemote    Remote?
  requiredSeniority Seniority?
  employmentType    EmploymentType?
  requiredYears     Int?
  requiredEducation String?
  requiredLanguages String?
  requiredSkills    String?
  sourceUrl         String?
  sourceName        SourceName?
  cvs               Cv[]

  @@unique([companyName, jobTitle])
}

enum ComponentName {
  // Inputs & Textareas
  TEXT
  DATE
  SELECT
  PHONE_NUMBER
  LOCATION
  PHONE_NUMBER_WITH_LABEL
  LOCATION_WITH_LABEL
  TEXT_WITH_LABEL
  DATE_WITH_LABEL
  SELECT_WITH_LABEL
  URL // Has label by default
  LANGUAGE // Has label by default
  // Headings
  H1
  H2
  H3
  H4
  H5
  H6
  H1_WITH_DIVIDER
  H2_WITH_DIVIDER
  H3_WITH_DIVIDER
  H4_WITH_DIVIDER
  H5_WITH_DIVIDER
}

model Component {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  index     Int
  component ComponentName
  label     String
  value     String
  area      Area          @relation(fields: [areaId], references: [id])
  areaId    String
}

model Area {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  index      Int
  components Component[]
  // Add more properties in the future like color, width, height, coords, etc.
  cv         Cv          @relation(fields: [cvId], references: [id])
  cvId       String
}

model Cv {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // General user data for easy access
  name            String
  experienceYears Int
  stories         String
  jobTitle        String
  objective       String
  image           String?
  country         String?
  city            String?
  seniority       Seniority?
  remote          Remote?
  user            User       @relation(fields: [userId], references: [id])
  userId          String
  vacancy         Vacancy    @relation(fields: [vacancyId], references: [id])
  vacancyId       String     @unique
  areas           Area[]
}

model Url {
  id        Int    @id @default(autoincrement())
  original  String
  shortCode String @unique
}
